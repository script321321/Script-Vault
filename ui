-- Elegant UI Library
-- Eine schöne, anpassbare UI-Bibliothek für Roblox

local ElegantUI = {}
ElegantUI.__index = ElegantUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Standard-Farbpalette
ElegantUI.Colors = {
    Primary = Color3.fromRGB(80, 120, 255),
    Secondary = Color3.fromRGB(60, 90, 200),
    Background = Color3.fromRGB(30, 30, 40),
    LightBackground = Color3.fromRGB(40, 40, 50),
    Text = Color3.fromRGB(240, 240, 240),
    Success = Color3.fromRGB(80, 200, 120),
    Warning = Color3.fromRGB(255, 180, 60),
    Danger = Color3.fromRGB(220, 80, 80),
    Accent = Color3.fromRGB(150, 100, 255)
}

-- Hilfsfunktionen
function ElegantUI:CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function ElegantUI:Tween(object, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Hauptfenster erstellen
function ElegantUI:CreateWindow(title, keybind, customColors)
    local Window = {}
    
    -- Benutzerdefinierte Farben verwenden falls vorhanden
    local colors = customColors or self.Colors
    
    -- ScreenGui erstellen
    local ScreenGui = self:CreateInstance("ScreenGui", {
        Name = "ElegantUI",
        ResetOnSpawn = false,
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })
    
    -- Hauptcontainer mit abgerundeten Ecken
    local MainFrame = self:CreateInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 500, 0, 450),
        Position = UDim2.new(0.5, -250, 0.5, -225),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = colors.Background,
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    
    local Corner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = MainFrame
    })
    
    -- Titelbar mit Schatten
    local TitleBar = self:CreateInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundColor3 = colors.Primary,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TitleCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8, 0, 0),
        Parent = TitleBar
    })
    
    local TitleText = self:CreateInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = title or "Elegant UI",
        TextColor3 = colors.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        Parent = TitleBar
    })
    
    local CloseButton = self:CreateInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 35, 0, 35),
        Position = UDim2.new(1, -35, 0, 0),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0, 0),
        BorderSizePixel = 0,
        Text = "×",
        TextColor3 = colors.Text,
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        Parent = TitleBar
    })
    
    -- Tabs Container
    local TabsContainer = self:CreateInstance("Frame", {
        Name = "TabsContainer",
        Size = UDim2.new(1, -20, 0, 40),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = colors.LightBackground,
        BorderSizePixel = 0,
        Parent = MainFrame
    })
    
    local TabsCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = TabsContainer
    })
    
    local UIListLayout = self:CreateInstance("UIListLayout", {
        Parent = TabsContainer,
        FillDirection = Enum.FillDirection.Horizontal,
        Padding = UDim.new(0, 5)
    })
    
    -- Content Container
    local ContentContainer = self:CreateInstance("ScrollingFrame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -20, 1, -85),
        Position = UDim2.new(0, 10, 0, 85),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = colors.Primary,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = MainFrame
    })
    
    local ContentLayout = self:CreateInstance("UIListLayout", {
        Parent = ContentContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 12)
    })
    
    -- Variablen
    local tabs = {}
    local currentTab = nil
    local isVisible = true
    
    -- Funktionen
    function Window:Toggle()
        isVisible = not isVisible
        MainFrame.Visible = isVisible
    end
    
    function Window:CreateTab(name)
        local Tab = {}
        
        -- Tab Button
        local TabButton = self:CreateInstance("TextButton", {
            Name = name .. "Tab",
            Size = UDim2.new(0, 100, 1, -10),
            Position = UDim2.new(0, 0, 0, 5),
            BackgroundColor3 = colors.LightBackground,
            BorderSizePixel = 0,
            Text = name,
            TextColor3 = colors.Text,
            Font = Enum.Font.Gotham,
            TextSize = 12,
            Parent = TabsContainer
        })
        
        local TabButtonCorner = self:CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = TabButton
        })
        
        -- Tab Content
        local TabContent = self:CreateInstance("Frame", {
            Name = name .. "Content",
            Size = UDim2.new(1, 0, 0, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = ContentContainer
        })
        
        local TabLayout = self:CreateInstance("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 12)
        })
        
        TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.Size = UDim2.new(1, 0, 0, TabLayout.AbsoluteContentSize.Y)
        end)
        
        -- Funktionen
        function Tab:Show()
            if currentTab then
                currentTab:Hide()
            end
            TabContent.Visible = true
            self:Tween(TabButton, {BackgroundColor3 = colors.Primary}, 0.2)
            currentTab = Tab
        end
        
        function Tab:Hide()
            TabContent.Visible = false
            self:Tween(TabButton, {BackgroundColor3 = colors.LightBackground}, 0.2)
        end
        
        function Tab:AddButton(name, callback)
            local ButtonFrame = self:CreateInstance("Frame", {
                Name = name .. "Button",
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = TabContent,
                LayoutOrder = #TabContent:GetChildren()
            })
            
            local Button = self:CreateInstance("TextButton", {
                Name = "Button",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = colors.Primary,
                BorderSizePixel = 0,
                Text = name,
                TextColor3 = colors.Text,
                Font = Enum.Font.Gotham,
                TextSize = 13,
                Parent = ButtonFrame
            })
            
            local ButtonCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = Button
            })
            
            Button.MouseEnter:Connect(function()
                self:Tween(Button, {BackgroundColor3 = colors.Secondary}, 0.2)
            end)
            
            Button.MouseLeave:Connect(function()
                self:Tween(Button, {BackgroundColor3 = colors.Primary}, 0.2)
            end)
            
            Button.MouseButton1Click:Connect(function()
                self:Tween(Button, {BackgroundColor3 = colors.Accent}, 0.1)
                if callback then callback() end
                wait(0.1)
                self:Tween(Button, {BackgroundColor3 = colors.Primary}, 0.2)
            end)
            
            return Button
        end
        
        function Tab:AddToggle(name, default, callback)
            local Toggle = {}
            local isEnabled = default or false
            
            local ToggleFrame = self:CreateInstance("Frame", {
                Name = name .. "Toggle",
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundTransparency = 1,
                Parent = TabContent,
                LayoutOrder = #TabContent:GetChildren()
            })
            
            local ToggleText = self:CreateInstance("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = colors.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 13,
                Parent = ToggleFrame
            })
            
            local ToggleButton = self:CreateInstance("TextButton", {
                Name = "Toggle",
                Size = UDim2.new(0, 45, 0, 22),
                Position = UDim2.new(1, 0, 0.5, 0),
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = isEnabled and colors.Success or Color3.fromRGB(100, 100, 100),
                BorderSizePixel = 0,
                Text = "",
                Parent = ToggleFrame
            })
            
            local ToggleCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 11),
                Parent = ToggleButton
            })
            
            local ToggleDot = self:CreateInstance("Frame", {
                Name = "Dot",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(0, isEnabled and 25 or 3, 0.5, -8),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = colors.Text,
                BorderSizePixel = 0,
                Parent = ToggleButton
            })
            
            local ToggleDotCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = ToggleDot
            })
            
            function Toggle:Set(value)
                isEnabled = value
                self:Tween(ToggleButton, {BackgroundColor3 = isEnabled and colors.Success or Color3.fromRGB(100, 100, 100)}, 0.2)
                self:Tween(ToggleDot, {Position = UDim2.new(0, isEnabled and 25 or 3, 0.5, -8)}, 0.2)
                if callback then callback(isEnabled) end
            end
            
            function Toggle:Get()
                return isEnabled
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                Toggle:Set(not isEnabled)
            end)
            
            return Toggle
        end
        
        function Tab:AddSlider(name, min, max, default, callback)
            local Slider = {}
            local value = default or min
            
            local SliderFrame = self:CreateInstance("Frame", {
                Name = name .. "Slider",
                Size = UDim2.new(1, 0, 0, 55),
                BackgroundTransparency = 1,
                Parent = TabContent,
                LayoutOrder = #TabContent:GetChildren()
            })
            
            local SliderHeader = self:CreateInstance("Frame", {
                Name = "Header",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Parent = SliderFrame
            })
            
            local SliderText = self:CreateInstance("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = colors.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 13,
                Parent = SliderHeader
            })
            
            local SliderValue = self:CreateInstance("TextLabel", {
                Name = "Value",
                Size = UDim2.new(0.3, 0, 1, 0),
                Position = UDim2.new(1, 0, 0, 0),
                AnchorPoint = Vector2.new(1, 0),
                BackgroundTransparency = 1,
                Text = tostring(value),
                TextColor3 = colors.Text,
                TextXAlignment = Enum.TextXAlignment.Right,
                Font = Enum.Font.Gotham,
                TextSize = 13,
                Parent = SliderHeader
            })
            
            local SliderTrack = self:CreateInstance("Frame", {
                Name = "Track",
                Size = UDim2.new(1, 0, 0, 6),
                Position = UDim2.new(0, 0, 1, -15),
                BackgroundColor3 = Color3.fromRGB(80, 80, 90),
                BorderSizePixel = 0,
                Parent = SliderFrame
            })
            
            local SliderTrackCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 3),
                Parent = SliderTrack
            })
            
            local SliderFill = self:CreateInstance("Frame", {
                Name = "Fill",
                Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = colors.Primary,
                BorderSizePixel = 0,
                Parent = SliderTrack
            })
            
            local SliderFillCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 3),
                Parent = SliderFill
            })
            
            local SliderButton = self:CreateInstance("TextButton", {
                Name = "Button",
                Size = UDim2.new(0, 18, 0, 18),
                Position = UDim2.new((value - min) / (max - min), -9, 0.5, -9),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = colors.Text,
                BorderSizePixel = 0,
                Text = "",
                Parent = SliderTrack
            })
            
            local SliderButtonCorner = self:CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 9),
                Parent = SliderButton
            })
            
            local isSliding = false
            
            function Slider:Set(newValue)
                value = math.clamp(math.floor(newValue), min, max)
                SliderValue.Text = tostring(value)
                local fillSize = (value - min) / (max - min)
                SliderFill.Size = UDim2.new(fillSize, 0, 1, 0)
                SliderButton.Position = UDim2.new(fillSize, -9, 0.5, -9)
                if callback then callback(value) end
            end
            
            function Slider:Get()
                return value
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                isSliding = true
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isSliding = false
                end
            end)
            
            SliderTrack.MouseButton1Down:Connect(function(x, y)
                local relativeX = x - SliderTrack.AbsolutePosition.X
                local percentage = math.clamp(relativeX / SliderTrack.AbsoluteSize.X, 0, 1)
                Slider:Set(min + (max - min) * percentage)
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if isSliding and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local relativeX = input.Position.X - SliderTrack.AbsolutePosition.X
                    local percentage = math.clamp(relativeX / SliderTrack.AbsoluteSize.X, 0, 1)
                    Slider:Set(min + (max - min) * percentage)
                end
            end)
            
            return Slider
        end
        
        function Tab:AddLabel(text)
            local LabelFrame = self:CreateInstance("Frame", {
                Name = "LabelFrame",
                Size = UDim2.new(1, 0, 0, 25),
                BackgroundTransparency = 1,
                Parent = TabContent,
                LayoutOrder = #TabContent:GetChildren()
            })
            
            local Label = self:CreateInstance("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = colors.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 13,
                Parent = LabelFrame
            })
            
            return Label
        end
        
        function Tab:AddDivider()
            local DividerFrame = self:CreateInstance("Frame", {
                Name = "DividerFrame",
                Size = UDim2.new(1, 0, 0, 15),
                BackgroundTransparency = 1,
                Parent = TabContent,
                LayoutOrder = #TabContent:GetChildren()
            })
            
            local Divider = self:CreateInstance("Frame", {
                Name = "Divider",
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 0.5, 0),
                BackgroundColor3 = Color3.fromRGB(80, 80, 90),
                BorderSizePixel = 0,
                Parent = DividerFrame
            })
            
            return Divider
        end
        
        -- Ersten Tab automatisch anzeigen
        if #tabs == 0 then
            Tab:Show()
        end
        
        TabButton.MouseButton1Click:Connect(function()
            Tab:Show()
        end)
        
        tabs[name] = Tab
        return Tab
    end
    
    -- Event-Handler
    CloseButton.MouseButton1Click:Connect(function()
        self:Tween(CloseButton, {BackgroundColor3 = colors.Danger}, 0.1)
        wait(0.1)
        Window:Toggle()
        self:Tween(CloseButton, {BackgroundColor3 = Color3.fromRGB(0, 0, 0, 0)}, 0.2)
    end)
    
    -- Tastenkürzel
    if keybind then
        UserInputService.InputBegan:Connect(function(input, processed)
            if not processed and input.KeyCode == Enum.KeyCode[keybind] then
                Window:Toggle()
            end
        end)
    end
    
    -- Layout-Updates
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentContainer.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
    end)
    
    return Window
end

return ElegantUI

