-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- UI Library
local UILibrary = {}

-- Theme-Farben
UILibrary.Theme = {
    Background = Color3.fromRGB(25, 25, 25),
    Secondary = Color3.fromRGB(35, 35, 35),
    Accent = Color3.fromRGB(70, 70, 70),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(200, 200, 200),
    Highlight = Color3.fromRGB(90, 90, 90)
}

-- Hilfsfunktionen
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

-- UI Library Funktionen
function UILibrary:CreateWindow(name)
    local Window = {}
    
    -- GUI Setup
    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "UILibrary",
        ResetOnSpawn = false,
        Parent = game:GetService("CoreGui")
    })
    
    local MainFrame = CreateInstance("Frame", {
        Size = UDim2.new(0, 500, 0, 500),
        Position = UDim2.new(0.5, -250, 0.5, -250),
        BackgroundColor3 = self.Theme.Background,
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    
    local Corner = CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 25),
        Parent = MainFrame
    })
    
    -- Shadow
    local Shadow = CreateInstance("Frame", {
        Size = UDim2.new(1, 10, 1, 10),
        Position = UDim2.new(0, -5, 0, -5),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.7,
        ZIndex = 0,
        Parent = MainFrame
    })
    
    local shadowCorner = CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 25),
        Parent = Shadow
    })
    
    -- Title
    local Title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 10),
        BackgroundTransparency = 1,
        Text = name,
        Font = Enum.Font.GothamBold,
        TextSize = 24,
        TextColor3 = self.Theme.Text,
        Parent = MainFrame
    })
    
    -- Tabs Container
    local TabsContainer = CreateInstance("Frame", {
        Size = UDim2.new(1, -40, 0, 40),
        Position = UDim2.new(0, 20, 0, 50),
        BackgroundTransparency = 1,
        Parent = MainFrame
    })
    
    local TabsListLayout = CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 10),
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = TabsContainer
    })
    
    -- Content Container
    local ContentContainer = CreateInstance("ScrollingFrame", {
        Size = UDim2.new(1, -40, 1, -110),
        Position = UDim2.new(0, 20, 0, 100),
        BackgroundTransparency = 1,
        ScrollBarThickness = 8,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarImageColor3 = self.Theme.Accent,
        Parent = MainFrame
    })
    
    local ContentListLayout = CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 15),
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = ContentContainer
    })
    
    ContentListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentContainer.CanvasSize = UDim2.new(0, 0, 0, ContentListLayout.AbsoluteContentSize.Y)
    end)
    
    -- Tabs Management
    local tabs = {}
    local currentTab = nil
    
    function Window:CreateTab(name)
        local Tab = {}
        
        local TabButton = CreateInstance("TextButton", {
            Size = UDim2.new(0, 100, 1, 0),
            BackgroundColor3 = UILibrary.Theme.Accent,
            Text = name,
            TextColor3 = UILibrary.Theme.Text,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            AutoButtonColor = false,
            Parent = TabsContainer
        })
        
        local TabCorner = CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 10),
            Parent = TabButton
        })
        
        local TabContent = CreateInstance("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = ContentContainer
        })
        
        local TabContentListLayout = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 15),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = TabContent
        })
        
        TabContentListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.Size = UDim2.new(1, 0, 0, TabContentListLayout.AbsoluteContentSize.Y)
        end)
        
        -- Tab Selection
        TabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.Button.BackgroundColor3 = UILibrary.Theme.Accent
                currentTab.Content.Visible = false
            end
            
            TabButton.BackgroundColor3 = UILibrary.Theme.Highlight
            TabContent.Visible = true
            currentTab = Tab
        end)
        
        -- Initial selection
        if #tabs == 0 then
            TabButton.BackgroundColor3 = UILibrary.Theme.Highlight
            TabContent.Visible = true
            currentTab = Tab
        end
        
        Tab.Button = TabButton
        Tab.Content = TabContent
        
        -- Tab Functions
        function Tab:CreateButton(name, callback)
            local Button = CreateInstance("TextButton", {
                Size = UDim2.new(1, 0, 0, 45),
                BackgroundColor3 = UILibrary.Theme.Accent,
                Text = name,
                TextColor3 = UILibrary.Theme.Text,
                Font = Enum.Font.GothamBold,
                TextSize = 18,
                AutoButtonColor = false,
                Parent = TabContent
            })
            
            local ButtonCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 15),
                Parent = Button
            })
            
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = UILibrary.Theme.Highlight}):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = UILibrary.Theme.Accent}):Play()
            end)
            
            Button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)
            
            return Button
        end
        
        function Tab:CreateToggle(name, default, callback)
            local Toggle = {}
            local value = default or false
            
            local ToggleFrame = CreateInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = TabContent
            })
            
            local ToggleText = CreateInstance("TextLabel", {
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = UILibrary.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = ToggleFrame
            })
            
            local ToggleButton = CreateInstance("TextButton", {
                Size = UDim2.new(0, 50, 0, 25),
                Position = UDim2.new(1, -50, 0.5, -12.5),
                BackgroundColor3 = value and UILibrary.Theme.Highlight or UILibrary.Theme.Accent,
                Text = "",
                AutoButtonColor = false,
                Parent = ToggleFrame
            })
            
            local ToggleCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 12),
                Parent = ToggleButton
            })
            
            local ToggleIndicator = CreateInstance("Frame", {
                Size = UDim2.new(0, 21, 0, 21),
                Position = UDim2.new(0, value and 29 or 2, 0.5, -10.5),
                BackgroundColor3 = UILibrary.Theme.Text,
                Parent = ToggleButton
            })
            
            local IndicatorCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 10),
                Parent = ToggleIndicator
            })
            
            local function updateToggle()
                value = not value
                TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {
                    Position = UDim2.new(0, value and 29 or 2, 0.5, -10.5)
                }):Play()
                
                TweenService:Create(ToggleButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = value and UILibrary.Theme.Highlight or UILibrary.Theme.Accent
                }):Play()
                
                if callback then
                    callback(value)
                end
            end
            
            ToggleButton.MouseButton1Click:Connect(updateToggle)
            
            function Toggle:SetValue(newValue)
                if value ~= newValue then
                    updateToggle()
                end
            end
            
            function Toggle:GetValue()
                return value
            end
            
            return Toggle
        end
        
        function Tab:CreateSlider(name, min, max, default, callback)
            local Slider = {}
            local value = default or min
            
            local SliderFrame = CreateInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 60),
                BackgroundTransparency = 1,
                Parent = TabContent
            })
            
            local SliderText = CreateInstance("TextLabel", {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = name .. ": " .. tostring(value),
                TextColor3 = UILibrary.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = SliderFrame
            })
            
            local SliderTrack = CreateInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 5),
                Position = UDim2.new(0, 0, 0, 35),
                BackgroundColor3 = UILibrary.Theme.Accent,
                Parent = SliderFrame
            })
            
            local TrackCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 2),
                Parent = SliderTrack
            })
            
            local SliderFill = CreateInstance("Frame", {
                Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = UILibrary.Theme.Highlight,
                Parent = SliderTrack
            })
            
            local FillCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 2),
                Parent = SliderFill
            })
            
            local SliderButton = CreateInstance("TextButton", {
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new((value - min) / (max - min), -10, 0.5, -10),
                BackgroundColor3 = UILibrary.Theme.Text,
                Text = "",
                AutoButtonColor = false,
                Parent = SliderTrack
            })
            
            local ButtonCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 10),
                Parent = SliderButton
            })
            
            local dragging = false
            
            local function updateSlider(input)
                local pos = UDim2.new(
                    math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1), 
                    0, 0.5, -10
                )
                
                SliderButton.Position = pos
                SliderFill.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
                
                local newValue = math.floor(min + (max - min) * pos.X.Scale)
                if newValue ~= value then
                    value = newValue
                    SliderText.Text = name .. ": " .. tostring(value)
                    
                    if callback then
                        callback(value)
                    end
                end
            end
            
            SliderButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end)
            
            SliderButton.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if dragging then
                        updateSlider(input)
                    end
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                    updateSlider(input)
                end
            end)
            
            function Slider:SetValue(newValue)
                newValue = math.clamp(newValue, min, max)
                value = newValue
                
                local pos = UDim2.new((value - min) / (max - min), -10, 0.5, -10)
                SliderButton.Position = pos
                SliderFill.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
                SliderText.Text = name .. ": " .. tostring(value)
                
                if callback then
                    callback(value)
                end
            end
            
            function Slider:GetValue()
                return value
            end
            
            return Slider
        end
        
        function Tab:CreateKeybind(name, default, callback)
            local Keybind = {}
            local key = default or Enum.KeyCode.Unknown
            local listening = false
            
            local KeybindFrame = CreateInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = TabContent
            })
            
            local KeybindText = CreateInstance("TextLabel", {
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = UILibrary.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = KeybindFrame
            })
            
            local KeybindButton = CreateInstance("TextButton", {
                Size = UDim2.new(0, 100, 0, 25),
                Position = UDim2.new(1, -100, 0.5, -12.5),
                BackgroundColor3 = UILibrary.Theme.Accent,
                Text = tostring(key.Name),
                TextColor3 = UILibrary.Theme.Text,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = KeybindFrame
            })
            
            local ButtonCorner = CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 5),
                Parent = KeybindButton
            })
            
            local function setKey(newKey)
                key = newKey
                KeybindButton.Text = tostring(key.Name)
                listening = false
                KeybindButton.BackgroundColor3 = UILibrary.Theme.Accent
                
                if callback then
                    callback(key)
                end
            end
            
            KeybindButton.MouseButton1Click:Connect(function()
                listening = not listening
                if listening then
                    KeybindButton.BackgroundColor3 = UILibrary.Theme.Highlight
                    KeybindButton.Text = "..."
                else
                    KeybindButton.BackgroundColor3 = UILibrary.Theme.Accent
                    KeybindButton.Text = tostring(key.Name)
                end
            end)
            
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if listening and not gameProcessed then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        setKey(input.KeyCode)
                        connection:Disconnect()
                    elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                        setKey(Enum.KeyCode.MouseButton1)
                        connection:Disconnect()
                    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                        setKey(Enum.KeyCode.MouseButton2)
                        connection:Disconnect()
                    elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                        setKey(Enum.KeyCode.MouseButton3)
                        connection:Disconnect()
                    end
                end
            end)
            
            function Keybind:SetKey(newKey)
                setKey(newKey)
            end
            
            function Keybind:GetKey()
                return key
            end
            
            return Keybind
        end
        
        function Tab:CreateLabel(text)
            local Label = CreateInstance("TextLabel", {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = UILibrary.Theme.SubText,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = TabContent
            })
            
            return Label
        end
        
        function Tab:CreateDivider()
            local Divider = CreateInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 1),
                BackgroundColor3 = UILibrary.Theme.Accent,
                Parent = TabContent
            })
            
            return Divider
        end
        
        tabs[#tabs + 1] = Tab
        return Tab
    end
    
    -- Drag & Drop
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    function Window:Toggle()
        MainFrame.Visible = not MainFrame.Visible
    end
    
    return Window
end

return UILibrary
