-- Roblox UI Library
-- Author: Generated by ChatGPT
-- Description: Modular UI library providing Window -> Tabs -> Sections -> Elements
-- Elements: Button, Toggle, Slider, Bind (Keybind), Dropdown, Label
-- Style: Dark rounded theme inspired by provided Script Vault GUI

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local Library = {}
Library.__index = Library

-- Theme
local THEME = {
    Main = Color3.fromRGB(25,25,25),
    Secondary = Color3.fromRGB(45,45,45),
    Accent = Color3.fromRGB(70,70,70),
    Text = Color3.fromRGB(255,255,255),
    SubText = Color3.fromRGB(200,200,200),
    Shadow = Color3.fromRGB(0,0,0)
}

-- Utilities
local function tcreate(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

local function tween(obj, props, time, style, dir)
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local info = TweenInfo.new(time or 0.2, style, dir)
    local t = TweenService:Create(obj, info, props)
    t:Play()
    return t
end

-- Draggable functionality
local function makeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Core window creation
function Library:CreateWindow(title)
    local self = setmetatable({}, Library)
    self._tabs = {}

    -- ScreenGui
    local ScreenGui = tcreate("ScreenGui", {Name = "LCGLibrary", ResetOnSpawn = false, Parent = CoreGui})

    -- Main Frame
    local MainFrame = tcreate("Frame", {
        Size = UDim2.new(0, 520, 0, 520),
        Position = UDim2.new(0.5, -260, 0.5, -260),
        BackgroundColor3 = THEME.Main,
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    local Corner = tcreate("UICorner", {CornerRadius = UDim.new(0,20), Parent = MainFrame})

    -- Shadow
    local Shadow = tcreate("Frame", {
        Size = UDim2.new(1,10,1,10),
        Position = UDim2.new(0,-5,0,-5),
        BackgroundColor3 = THEME.Shadow,
        BackgroundTransparency = 0.7,
        ZIndex = 0,
        Parent = MainFrame
    })
    tcreate("UICorner", {CornerRadius = UDim.new(0,20), Parent = Shadow})

    -- Title
    local TitleLabel = tcreate("TextLabel", {
        Size = UDim2.new(1,0,0,60),
        Position = UDim2.new(0,0,0,10),
        BackgroundTransparency = 1,
        Text = title or "Library Window",
        Font = Enum.Font.GothamBold,
        TextSize = 28,
        TextColor3 = THEME.Text,
        Parent = MainFrame
    })

    -- Left Tab List
    local TabList = tcreate("Frame", {
        Size = UDim2.new(0,160,1,-100),
        Position = UDim2.new(0,20,0,90),
        BackgroundTransparency = 1,
        Parent = MainFrame
    })
    tcreate("UIListLayout", {Parent = TabList, Padding = UDim.new(0,8), FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Center})

    -- Right Content Area
    local Content = tcreate("Frame", {
        Size = UDim2.new(1,-200,1,-100),
        Position = UDim2.new(0,180,0,90),
        BackgroundColor3 = THEME.Secondary,
        Parent = MainFrame
    })
    tcreate("UICorner", {CornerRadius = UDim.new(0,12), Parent = Content})

    -- Content Title
    local ContentTitle = tcreate("TextLabel", {
        Size = UDim2.new(1,0,0,42),
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,6),
        Text = "",
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextColor3 = THEME.Text,
        Parent = Content
    })

    -- Content Scrolling Area
    local ContentScroll = tcreate("ScrollingFrame", {
        Size = UDim2.new(1,-24,1,-64),
        Position = UDim2.new(0,12,0,54),
        BackgroundTransparency = 1,
        ScrollBarThickness = 8,
        Parent = Content
    })
    local ContentLayout = tcreate("UIListLayout", {Parent = ContentScroll, Padding = UDim.new(0,12), SortOrder = Enum.SortOrder.LayoutOrder})

    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentScroll.CanvasSize = UDim2.new(0,0,0, ContentLayout.AbsoluteContentSize.Y + 10)
    end)

    -- Store references
    self._gui = {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        TabList = TabList,
        Content = Content,
        ContentTitle = ContentTitle,
        ContentScroll = ContentScroll,
        ContentLayout = ContentLayout
    }

    -- Make draggable
    makeDraggable(MainFrame)

    -- Open animation
    tween(MainFrame, {Position = MainFrame.Position}, 0.001) -- ensure initial set
    tween(MainFrame, {Position = UDim2.new(0.5, -260, 0.5, -260)}, 0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

    -- API: CreateTab
    function self:CreateTab(tabName)
        local tab = {}
        tab._sections = {}

        -- Tab button
        local btn = tcreate("TextButton", {
            Size = UDim2.new(1, -12, 0, 42),
            BackgroundColor3 = THEME.Accent,
            BorderSizePixel = 0,
            Text = tabName,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            TextColor3 = THEME.Text,
            Parent = self._gui.TabList
        })
        tcreate("UICorner", {CornerRadius = UDim.new(0,10), Parent = btn})
        local gradient = tcreate("UIGradient", {Parent = btn})
        gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,Color3.fromRGB(100,100,100)), ColorSequenceKeypoint.new(1,Color3.fromRGB(50,50,50))})

        btn.MouseEnter:Connect(function()
            tween(btn, {BackgroundColor3 = Color3.fromRGB(90,90,90)}, 0.15)
        end)
        btn.MouseLeave:Connect(function()
            tween(btn, {BackgroundColor3 = THEME.Accent}, 0.15)
        end)

        btn.MouseButton1Click:Connect(function()
            -- Set content title and clear existing content
            self._gui.ContentTitle.Text = tabName
            for _,v in ipairs(self._gui.ContentScroll:GetChildren()) do
                if v:IsA("Frame") or v:IsA("TextLabel") or v:IsA("TextButton") then
                    v:Destroy()
                end
            end

            -- Rebuild sections
            for _,section in ipairs(tab._sections) do
                section._render(self._gui.ContentScroll)
            end
        end)

        -- Section creation
        function tab:CreateSection(sectionName)
            local section = {name = sectionName, elements = {}}

            function section:Element(funcName, ...)
                -- reserved
            end

            function section:Button(text, callback)
                table.insert(self.elements, {type = "button", text = text, callback = callback})
                return self
            end

            function section:Label(text)
                table.insert(self.elements, {type = "label", text = text})
                return self
            end

            function section:Toggle(text, default, callback)
                table.insert(self.elements, {type = "toggle", text = text, default = default or false, callback = callback})
                return self
            end

            function section:Slider(text, min, max, default, increment, callback)
                table.insert(self.elements, {type = "slider", text = text, min = min, max = max, default = default or min, increment = increment or 1, callback = callback})
                return self
            end

            function section:Bind(text, defaultKey, callback)
                table.insert(self.elements, {type = "bind", text = text, key = defaultKey or "Undefined", callback = callback})
                return self
            end

            function section:Dropdown(text, options, defaultIndex, callback)
                table.insert(self.elements, {type = "dropdown", text = text, options = options or {}, index = defaultIndex or 1, callback = callback})
                return self
            end

            function section:_render(parent)
                -- Container
                local SecFrame = tcreate("Frame", {Size = UDim2.new(1, -24, 0, 36), BackgroundTransparency = 1, Parent = parent})
                tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = SecFrame})

                local SecTitle = tcreate("TextLabel", {
                    Size = UDim2.new(1,0,0,20),
                    BackgroundTransparency = 1,
                    Text = self.name,
                    Font = Enum.Font.GothamBold,
                    TextSize = 16,
                    TextColor3 = THEME.Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = SecFrame
                })

                local Inner = tcreate("Frame", {Size = UDim2.new(1,0,0, (36 * #self.elements)), BackgroundTransparency = 1, Position = UDim2.new(0,0,0,24), Parent = SecFrame})
                tcreate("UIListLayout", {Parent = Inner, Padding = UDim.new(0,8), SortOrder = Enum.SortOrder.LayoutOrder})

                -- Render each element
                for _,el in ipairs(self.elements) do
                    if el.type == "label" then
                        local lbl = tcreate("TextLabel", {
                            Size = UDim2.new(1,0,0,24),
                            BackgroundTransparency = 1,
                            Text = el.text,
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            TextColor3 = THEME.SubText,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            Parent = Inner
                        })
                    elseif el.type == "button" then
                        local btn = tcreate("TextButton", {
                            Size = UDim2.new(1,0,0,34),
                            BackgroundColor3 = THEME.Accent,
                            BorderSizePixel = 0,
                            Text = el.text,
                            Font = Enum.Font.GothamBold,
                            TextSize = 14,
                            TextColor3 = THEME.Text,
                            Parent = Inner
                        })
                        tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = btn})
                        btn.MouseButton1Click:Connect(function()
                            pcall(function() el.callback() end)
                        end)
                    elseif el.type == "toggle" then
                        local holder = tcreate("Frame", {Size = UDim2.new(1,0,0,28), BackgroundTransparency = 1, Parent = Inner})
                        local lbl = tcreate("TextLabel", {Size = UDim2.new(0.75,0,1,0), BackgroundTransparency = 1, Text = el.text, Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = holder})
                        local tbtn = tcreate("TextButton", {Size = UDim2.new(0,48,0,24), Position = UDim2.new(1,-48,0,2), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Text = "", Parent = holder})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = tbtn})
                        local dot = tcreate("Frame", {Size = UDim2.new(0,20,0,20), Position = UDim2.new(0,2,0,2), BackgroundColor3 = Color3.fromRGB(30,30,30), Parent = tbtn})
                        tcreate("UICorner", {CornerRadius = UDim.new(1,0), Parent = dot})

                        local state = el.default
                        local function updateToggle()
                            if state then
                                tween(dot, {Position = UDim2.new(1,-22,0,2)}, 0.18)
                                dot.BackgroundColor3 = Color3.fromRGB(60,200,120)
                            else
                                tween(dot, {Position = UDim2.new(0,2,0,2)}, 0.18)
                                dot.BackgroundColor3 = Color3.fromRGB(30,30,30)
                            end
                        end
                        updateToggle()
                        tbtn.MouseButton1Click:Connect(function()
                            state = not state
                            updateToggle()
                            pcall(function() el.callback(state) end)
                        end)
                    elseif el.type == "slider" then
                        local holder = tcreate("Frame", {Size = UDim2.new(1,0,0,48), BackgroundTransparency = 1, Parent = Inner})
                        local lbl = tcreate("TextLabel", {Size = UDim2.new(0.6,0,0,20), BackgroundTransparency = 1, Text = el.text, Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = holder})
                        local valLbl = tcreate("TextLabel", {Size = UDim2.new(0.4,-8,0,20), Position = UDim2.new(0.6,8,0,0), BackgroundTransparency = 1, Text = tostring(el.default), Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.SubText, TextXAlignment = Enum.TextXAlignment.Right, Parent = holder})

                        local sliderBg = tcreate("Frame", {Size = UDim2.new(1,0,0,8), Position = UDim2.new(0,0,0,26), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Parent = holder})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,6), Parent = sliderBg})
                        local sliderFill = tcreate("Frame", {Size = UDim2.new( (el.default - el.min) / (el.max - el.min), 0, 1, 0), BackgroundColor3 = Color3.fromRGB(120,120,120), BorderSizePixel = 0, Parent = sliderBg})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,6), Parent = sliderFill})

                        local dragging = false
                        local function updateValueFromInput(x)
                            local abs = sliderBg.AbsolutePosition.X
                            local width = sliderBg.AbsoluteSize.X
                            local rel = math.clamp((x - abs) / width, 0, 1)
                            local stepped = math.floor((el.min + (el.max - el.min) * rel) / el.increment + 0.5) * el.increment
                            stepped = math.clamp(stepped, el.min, el.max)
                            local scale = (stepped - el.min) / (el.max - el.min)
                            sliderFill.Size = UDim2.new(scale, 0, 1, 0)
                            valLbl.Text = tostring(stepped)
                            pcall(function() el.callback(stepped) end)
                        end

                        sliderBg.InputBegan:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                dragging = true
                                updateValueFromInput(input.Position.X)
                            end
                        end)
                        sliderBg.InputEnded:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                dragging = false
                            end
                        end)
                        UserInputService.InputChanged:Connect(function(input)
                            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                                updateValueFromInput(input.Position.X)
                            end
                        end)

                    elseif el.type == "bind" then
                        local holder = tcreate("Frame", {Size = UDim2.new(1,0,0,28), BackgroundTransparency = 1, Parent = Inner})
                        local lbl = tcreate("TextLabel", {Size = UDim2.new(0.65,0,1,0), BackgroundTransparency = 1, Text = el.text, Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = holder})
                        local keyBtn = tcreate("TextButton", {Size = UDim2.new(0,100,0,24), Position = UDim2.new(1,-100,0,2), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Text = tostring(el.key), Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = THEME.Text, Parent = holder})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = keyBtn})

                        local waiting = false
                        keyBtn.MouseButton1Click:Connect(function()
                            waiting = true
                            keyBtn.Text = "..."
                            local conn
                            conn = UserInputService.InputBegan:Connect(function(input, processed)
                                if processed then return end
                                if input.KeyCode then
                                    el.key = input.KeyCode.Name
                                    keyBtn.Text = el.key
                                    waiting = false
                                    conn:Disconnect()
                                    break
                                end
                            end)
                        end)

                        -- Global key listener
                        spawn(function()
                            while wait(0.1) do
                                if el.key and el.key ~= "Undefined" then
                                    -- nothing here; we handle in global listener below
                                    break
                                end
                            end
                        end)

                    elseif el.type == "dropdown" then
                        local holder = tcreate("Frame", {Size = UDim2.new(1,0,0,28), BackgroundTransparency = 1, Parent = Inner})
                        local lbl = tcreate("TextLabel", {Size = UDim2.new(0.5,0,1,0), BackgroundTransparency = 1, Text = el.text, Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = holder})
                        local ddBtn = tcreate("TextButton", {Size = UDim2.new(0,140,0,24), Position = UDim2.new(1,-140,0,2), BackgroundColor3 = THEME.Accent, BorderSizePixel = 0, Text = el.options[el.index] or "", Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = THEME.Text, Parent = holder})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = ddBtn})

                        local dropdownFrame = tcreate("Frame", {Size = UDim2.new(0,140,0,#el.options * 26), Position = UDim2.new(1,-140,0,28), BackgroundColor3 = THEME.Secondary, Visible = false, ZIndex = 50, Parent = holder})
                        tcreate("UICorner", {CornerRadius = UDim.new(0,8), Parent = dropdownFrame})
                        local ddLayout = tcreate("UIListLayout", {Parent = dropdownFrame, Padding = UDim.new(0,2)})
                        for i,opt in ipairs(el.options) do
                            local optBtn = tcreate("TextButton", {Size = UDim2.new(1,0,0,24), BackgroundTransparency = 1, Text = opt, Font = Enum.Font.Gotham, TextSize = 14, TextColor3 = THEME.Text, Parent = dropdownFrame})
                            optBtn.MouseButton1Click:Connect(function()
                                el.index = i
                                ddBtn.Text = opt
                                dropdownFrame.Visible = false
                                pcall(function() el.callback(opt, i) end)
                            end)
                        end

                        ddBtn.MouseButton1Click:Connect(function()
                            dropdownFrame.Visible = not dropdownFrame.Visible
                        end)

                    end
                end

                -- adjust inner size
                local total = 0
                for _,v in ipairs(self.elements) do
                    if v.type == "slider" then total = total + 48
                    elseif v.type == "button" then total = total + 34
                    else total = total + 28
                    end
                end
                SecFrame.Size = UDim2.new(1, -24, 0, 24 + total + 8)

            end -- _render

            table.insert(tab._sections, section)
            return section
        end -- CreateSection

        table.insert(self._tabs, tab)
        return tab
    end

    -- Global bind handler
    local binds = {}
    -- populate binds when tabs/sections rendered
    -- We'll update binds on every tab button click to collect current binds
    local function refreshBinds()
        binds = {}
        for _,tab in ipairs(self._tabs) do
            for _,sec in ipairs(tab._sections) do
                for _,el in ipairs(sec.elements) do
                    if el.type == "bind" and el.key and el.key ~= "Undefined" then
                        binds[el.key] = el.callback
                    end
                end
            end
        end
    end

    UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode then
            local name = input.KeyCode.Name
            if binds[name] then
                pcall(function() binds[name]() end)
            end
        end
    end)

    -- Expose api
    return self
end

-- Usage Example (uncomment to test)
-- local lib = Library:CreateWindow("Script Vault - Library")
-- local t1 = lib:CreateTab("Main")
-- local s1 = t1:CreateSection("General")
-- s1:Label("Welcome to the Library")
-- s1:Button("Click Me", function() print("Button clicked") end)
-- s1:Toggle("Toggle Option", true, function(v) print("Toggle ->", v) end)
-- s1:Slider("Speed", 0, 100, 50, 1, function(v) print("Slider ->", v) end)
-- s1:Bind("Activate", "F", function() print("Bind triggered") end)
-- s1:Dropdown("Choose", {"First","Second","Third"}, 1, function(opt, idx) print("Chosen", opt, idx) end)

return Library
